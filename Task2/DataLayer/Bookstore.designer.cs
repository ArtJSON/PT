#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bookstore")]
	public partial class BookstoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertbooks(books instance);
    partial void Updatebooks(books instance);
    partial void Deletebooks(books instance);
    partial void Insertstates(states instance);
    partial void Updatestates(states instance);
    partial void Deletestates(states instance);
    partial void Insertcustomers(customers instance);
    partial void Updatecustomers(customers instance);
    partial void Deletecustomers(customers instance);
    partial void Insertevents(events instance);
    partial void Updateevents(events instance);
    partial void Deleteevents(events instance);
    #endregion
		
		public BookstoreDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.BookstoreConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BookstoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookstoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookstoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BookstoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<books> books
		{
			get
			{
				return this.GetTable<books>();
			}
		}
		
		public System.Data.Linq.Table<states> states
		{
			get
			{
				return this.GetTable<states>();
			}
		}
		
		public System.Data.Linq.Table<customers> customers
		{
			get
			{
				return this.GetTable<customers>();
			}
		}
		
		public System.Data.Linq.Table<events> events
		{
			get
			{
				return this.GetTable<events>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.books")]
	public partial class books : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _book_id;
		
		private string _name;
		
		private int _pages;
		
		private double _price;
		
		private EntitySet<states> _states;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbook_idChanging(int value);
    partial void Onbook_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpagesChanging(int value);
    partial void OnpagesChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    #endregion
		
		public books()
		{
			this._states = new EntitySet<states>(new Action<states>(this.attach_states), new Action<states>(this.detach_states));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int book_id
		{
			get
			{
				return this._book_id;
			}
			set
			{
				if ((this._book_id != value))
				{
					this.Onbook_idChanging(value);
					this.SendPropertyChanging();
					this._book_id = value;
					this.SendPropertyChanged("book_id");
					this.Onbook_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pages", DbType="Int NOT NULL")]
		public int pages
		{
			get
			{
				return this._pages;
			}
			set
			{
				if ((this._pages != value))
				{
					this.OnpagesChanging(value);
					this.SendPropertyChanging();
					this._pages = value;
					this.SendPropertyChanged("pages");
					this.OnpagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="books_states", Storage="_states", ThisKey="book_id", OtherKey="book_id")]
		public EntitySet<states> states
		{
			get
			{
				return this._states;
			}
			set
			{
				this._states.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_states(states entity)
		{
			this.SendPropertyChanging();
			entity.books = this;
		}
		
		private void detach_states(states entity)
		{
			this.SendPropertyChanging();
			entity.books = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.states")]
	public partial class states : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _state_id;
		
		private System.Nullable<int> _book_id;
		
		private int _amount;
		
		private EntitySet<events> _events;
		
		private EntityRef<books> _books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstate_idChanging(int value);
    partial void Onstate_idChanged();
    partial void Onbook_idChanging(System.Nullable<int> value);
    partial void Onbook_idChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    #endregion
		
		public states()
		{
			this._events = new EntitySet<events>(new Action<events>(this.attach_events), new Action<events>(this.detach_events));
			this._books = default(EntityRef<books>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int state_id
		{
			get
			{
				return this._state_id;
			}
			set
			{
				if ((this._state_id != value))
				{
					this.Onstate_idChanging(value);
					this.SendPropertyChanging();
					this._state_id = value;
					this.SendPropertyChanged("state_id");
					this.Onstate_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_book_id", DbType="Int")]
		public System.Nullable<int> book_id
		{
			get
			{
				return this._book_id;
			}
			set
			{
				if ((this._book_id != value))
				{
					if (this._books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbook_idChanging(value);
					this.SendPropertyChanging();
					this._book_id = value;
					this.SendPropertyChanged("book_id");
					this.Onbook_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="states_events", Storage="_events", ThisKey="state_id", OtherKey="state_id")]
		public EntitySet<events> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="books_states", Storage="_books", ThisKey="book_id", OtherKey="book_id", IsForeignKey=true)]
		public books books
		{
			get
			{
				return this._books.Entity;
			}
			set
			{
				books previousValue = this._books.Entity;
				if (((previousValue != value) 
							|| (this._books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._books.Entity = null;
						previousValue.states.Remove(this);
					}
					this._books.Entity = value;
					if ((value != null))
					{
						value.states.Add(this);
						this._book_id = value.book_id;
					}
					else
					{
						this._book_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("books");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(events entity)
		{
			this.SendPropertyChanging();
			entity.states = this;
		}
		
		private void detach_events(events entity)
		{
			this.SendPropertyChanging();
			entity.states = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customers")]
	public partial class customers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _customer_id;
		
		private string _name;
		
		private string _surname;
		
		private EntitySet<events> _events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncustomer_idChanging(int value);
    partial void Oncustomer_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    #endregion
		
		public customers()
		{
			this._events = new EntitySet<events>(new Action<events>(this.attach_events), new Action<events>(this.detach_events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customers_events", Storage="_events", ThisKey="customer_id", OtherKey="customer_id")]
		public EntitySet<events> events
		{
			get
			{
				return this._events;
			}
			set
			{
				this._events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_events(events entity)
		{
			this.SendPropertyChanging();
			entity.customers = this;
		}
		
		private void detach_events(events entity)
		{
			this.SendPropertyChanging();
			entity.customers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.events")]
	public partial class events : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _event_id;
		
		private System.Nullable<int> _state_id;
		
		private System.Nullable<int> _customer_id;
		
		private System.DateTime _event_date;
		
		private EntityRef<customers> _customers;
		
		private EntityRef<states> _states;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(string value);
    partial void Onevent_idChanged();
    partial void Onstate_idChanging(System.Nullable<int> value);
    partial void Onstate_idChanged();
    partial void Oncustomer_idChanging(System.Nullable<int> value);
    partial void Oncustomer_idChanged();
    partial void Onevent_dateChanging(System.DateTime value);
    partial void Onevent_dateChanged();
    #endregion
		
		public events()
		{
			this._customers = default(EntityRef<customers>);
			this._states = default(EntityRef<states>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_id", DbType="VarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state_id", DbType="Int")]
		public System.Nullable<int> state_id
		{
			get
			{
				return this._state_id;
			}
			set
			{
				if ((this._state_id != value))
				{
					if (this._states.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstate_idChanging(value);
					this.SendPropertyChanging();
					this._state_id = value;
					this.SendPropertyChanged("state_id");
					this.Onstate_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="Int")]
		public System.Nullable<int> customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					if (this._customers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_date", DbType="DateTime NOT NULL")]
		public System.DateTime event_date
		{
			get
			{
				return this._event_date;
			}
			set
			{
				if ((this._event_date != value))
				{
					this.Onevent_dateChanging(value);
					this.SendPropertyChanging();
					this._event_date = value;
					this.SendPropertyChanged("event_date");
					this.Onevent_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customers_events", Storage="_customers", ThisKey="customer_id", OtherKey="customer_id", IsForeignKey=true, DeleteRule="SET NULL")]
		public customers customers
		{
			get
			{
				return this._customers.Entity;
			}
			set
			{
				customers previousValue = this._customers.Entity;
				if (((previousValue != value) 
							|| (this._customers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customers.Entity = null;
						previousValue.events.Remove(this);
					}
					this._customers.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._customer_id = value.customer_id;
					}
					else
					{
						this._customer_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("customers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="states_events", Storage="_states", ThisKey="state_id", OtherKey="state_id", IsForeignKey=true, DeleteRule="SET NULL")]
		public states states
		{
			get
			{
				return this._states.Entity;
			}
			set
			{
				states previousValue = this._states.Entity;
				if (((previousValue != value) 
							|| (this._states.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._states.Entity = null;
						previousValue.events.Remove(this);
					}
					this._states.Entity = value;
					if ((value != null))
					{
						value.events.Add(this);
						this._state_id = value.state_id;
					}
					else
					{
						this._state_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("states");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
